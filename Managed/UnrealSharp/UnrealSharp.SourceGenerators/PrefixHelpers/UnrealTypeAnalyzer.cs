using System.Collections.Immutable;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Diagnostics;

namespace UnrealSharp.SourceGenerators.PrefixHelpers;

[DiagnosticAnalyzer(LanguageNames.CSharp)]
public class UnrealTypeAnalyzer : DiagnosticAnalyzer
{
    public static readonly string PrefixAnalyzerId = "UnrealPrefixAnalyzer";
    private static readonly LocalizableString Title = "Unreal Prefix Analyzer";
    private static readonly LocalizableString MessageFormat = "{0} '{1}' should have prefix '{2}'";
    private static readonly LocalizableString Description = "Ensures types have appropriate prefixes.";
    private const string Category = "Naming";

    public static readonly DiagnosticDescriptor Rule = new(PrefixAnalyzerId, Title, MessageFormat, Category, DiagnosticSeverity.Error, isEnabledByDefault: true, description: Description);

    public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics => ImmutableArray.Create(Rule);

    public override void Initialize(AnalysisContext context)
    {
        context.ConfigureGeneratedCodeAnalysis(GeneratedCodeAnalysisFlags.None);
        context.EnableConcurrentExecution();
        context.RegisterSymbolAction(AnalyzeSymbol, SymbolKind.NamedType);
    }

    private static void AnalyzeSymbol(SymbolAnalysisContext context)
    {
        var namedTypeSymbol = (INamedTypeSymbol)context.Symbol;
        string prefix = null;

        // These types are generated by the script generator, and already have the correct prefix
        if (PrefixStatics.HasAttribute(namedTypeSymbol, PrefixStatics.GeneratedTypeAttribute))
        {
            return;
        }
        
        if (namedTypeSymbol.TypeKind == TypeKind.Struct)
        {
            if (!PrefixStatics.HasAttribute(namedTypeSymbol, PrefixStatics.UStructAttribute))
            {
                return;
            }
            
            prefix = "F";
        }
        else if (namedTypeSymbol.TypeKind == TypeKind.Enum)
        {
            if (!PrefixStatics.HasAttribute(namedTypeSymbol, PrefixStatics.UEnumAttribute))
            {
                return;
            }
            
            prefix = "E";
        }
        else if (namedTypeSymbol.TypeKind == TypeKind.Class)
        {
            if (!PrefixStatics.HasAttribute(namedTypeSymbol, PrefixStatics.UClassAttribute))
            {
                return;
            }
            
            if (PrefixStatics.InheritsFrom(namedTypeSymbol, PrefixStatics.AActor))
            {
                prefix = "A";
            }
            else if (PrefixStatics.InheritsFrom(namedTypeSymbol, PrefixStatics.UObject))
            {
                prefix = "U";
            }
        }

        if (prefix == null || namedTypeSymbol.Name.StartsWith(prefix))
        {
            return;
        }
        
        var diagnostic = Diagnostic.Create(Rule, namedTypeSymbol.Locations[0], namedTypeSymbol.TypeKind.ToString(), namedTypeSymbol.Name, prefix);
        context.ReportDiagnostic(diagnostic);
    }
}